// Generated by Dagger (https://dagger.dev).
package com.hotmart.locations.core.injection;

import com.hotmart.locations.core.http.HttpManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CoreModule_ProvidesHttpManager$core_productionFactory implements Factory<HttpManager> {
  private final CoreModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public CoreModule_ProvidesHttpManager$core_productionFactory(CoreModule module,
      Provider<OkHttpClient> okHttpClientProvider) {
    this.module = module;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public HttpManager get() {
    return providesHttpManager$core_production(module, okHttpClientProvider.get());
  }

  public static CoreModule_ProvidesHttpManager$core_productionFactory create(CoreModule module,
      Provider<OkHttpClient> okHttpClientProvider) {
    return new CoreModule_ProvidesHttpManager$core_productionFactory(module, okHttpClientProvider);
  }

  public static HttpManager providesHttpManager$core_production(CoreModule instance,
      OkHttpClient okHttpClient) {
    return Preconditions.checkNotNullFromProvides(instance.providesHttpManager$core_production(okHttpClient));
  }
}
